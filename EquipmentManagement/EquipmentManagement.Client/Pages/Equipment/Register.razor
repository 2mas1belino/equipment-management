@page "/equipment/register"
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Register New Equipment</h3>

<EditForm Model="@newEquipment" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="newEquipment.Name" class="form-control" />
        <ValidationMessage For="@(() => newEquipment.Name)" />
    </div>

    <div class="form-group">
        <label for="model">Model:</label>
        <InputText id="model" @bind-Value="newEquipment.Model" class="form-control" />
        <ValidationMessage For="@(() => newEquipment.Model)" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" @bind-Value="newEquipment.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label>Equipment Image:</label>
        <InputFile OnChange="@HandleFileUpload" class="form-control" />
        @if (imagePreviewUrl != null)
        {
            <img src="@imagePreviewUrl" alt="Preview" style="max-height: 200px; margin-top: 10px;" />
        }
    </div>

    <div class="availability-section">
        <h4>Set Availability</h4>
    
        <div class="period-input">
            <InputDate @bind-Value="newPeriod.StartDate" />
            <InputDate @bind-Value="newPeriod.EndDate" />
            <button type="button" @onclick="AddPeriod">Add Period</button>
        </div>

        <div class="periods-preview">
            @foreach (var p in localPeriods)
            {
                <div class="period-badge">
                    @p.StartDate.ToString("g") - @p.EndDate.ToString("g")
                    <button type="button" @onclick="() => RemovePeriod(p)">×</button>
                </div>
            }
        </div>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Register</button>
    <button type="button" class="btn btn-secondary mt-3 ml-2" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    private Equipment newEquipment = new();
    private string? imagePreviewUrl;
    private IBrowserFile? selectedFile;
    private List<AvailabilityPeriod> localPeriods = new();
    private AvailabilityPeriod newPeriod = new();

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        imagePreviewUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task UploadImage(int equipmentId, IBrowserFile file)
    {
        using var content = new MultipartFormDataContent();
        using var fileStream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB max
        content.Add(new StreamContent(fileStream), "file", file.Name);

        await Http.PostAsync($"api/equipment/{equipmentId}/upload-image", content);
    }

    private void AddPeriod()
    {
        if (newPeriod.StartDate < newPeriod.EndDate)
        {
            localPeriods.Add(new AvailabilityPeriod {
                StartDate = newPeriod.StartDate,
                EndDate = newPeriod.EndDate
            });
            newPeriod = new(); // reset
        }

        Console.WriteLine($"Local periods list: {localPeriods}");
    }

    private void RemovePeriod(AvailabilityPeriod period)
    {
        localPeriods.Remove(period);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/equipment", newEquipment);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Criei o equipamento!");

                var createdEquipment = await response.Content.ReadFromJsonAsync<Equipment>();

                foreach (var period in localPeriods)
                {
                    var periodToSend = new AvailabilityPeriod 
                    {
                        StartDate = period.StartDate,
                        EndDate = period.EndDate,
                        EquipmentId = createdEquipment.Id
                    };
                
                    await Http.PostAsJsonAsync(
                        $"api/equipment/{createdEquipment.Id}/availability", 
                        periodToSend);
                }

                if (selectedFile != null && createdEquipment != null)
                {
                    await UploadImage(createdEquipment.Id, selectedFile);
                }

                NavManager.NavigateTo("/equipments");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/equipments");
    }
}
