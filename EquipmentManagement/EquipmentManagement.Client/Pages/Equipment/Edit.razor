@page "/equipment/edit/{id}"
@using EquipmentManagement.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Edit Equipment</h3>

@if (equipment == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@equipment" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="equipment-details">
            <div class="details-container">
                <div class="image-section">
                    @if (HasImage)
                    {
                        <div class="image-container">
                            <img src="@ImageUrl" alt="@equipment.Name" class="equipment-image" />
                            <button type="button" class="btn btn-danger btn-sm delete-image-btn" 
                                    @onclick="DeleteImage">
                                <span class="oi oi-trash"></span> Delete Image
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="no-image">No Image Available</div>
                    }
                    <InputFile OnChange="@HandleFileUpload" class="form-control mt-2" />
                </div>

                <div class="info-section">
                    <div class="detail-row">
                        <span class="detail-label">Name:</span>
                        <InputText @bind-Value="equipment.Name" class="form-control detail-value" />
                    </div>
                    
                    <div class="detail-row">
                        <span class="detail-label">Model:</span>
                        <InputText @bind-Value="equipment.Model" class="form-control detail-value" />
                    </div>
                    
                    <div class="detail-row">
                        <span class="detail-label">Description:</span>
                        <InputTextArea @bind-Value="equipment.Description" class="form-control detail-value" />
                    </div>
                </div>
            </div>

            <div class="button-group">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private Equipment? equipment;
    private IBrowserFile? selectedFile;
    private string? ImageUrl => HasImage ? $"data:{equipment!.ImageContentType};base64,{Convert.ToBase64String(equipment.ImageData!)}" : null;
    private bool HasImage => equipment?.ImageData != null && equipment.ImageContentType != null;

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(Id, out int equipmentId))
        {
            equipment = await Http.GetFromJsonAsync<Equipment>($"api/equipment/{equipmentId}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/equipment/{equipment!.Id}", equipment);
            
            if (response.IsSuccessStatusCode && selectedFile != null)
            {
                await UploadImage(equipment.Id, selectedFile);
            }

            NavManager.NavigateTo($"/equipment/{equipment.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating equipment: {ex.Message}");
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        equipment!.ImageData = buffer;
        equipment.ImageContentType = format;
    }

    private async Task UploadImage(int equipmentId, IBrowserFile file)
    {
        using var content = new MultipartFormDataContent();
        using var fileStream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        content.Add(new StreamContent(fileStream), "file", file.Name);
        
        await Http.PostAsync($"api/equipment/{equipmentId}/upload-image", content);
    }

    private async Task DeleteImage()
    {
        if (equipment == null) return;
        
        try 
        {
            equipment.ImageData = null;
            equipment.ImageContentType = null;
            
            var response = await Http.DeleteAsync($"api/equipment/{equipment.Id}/image");
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting image: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo($"/equipment/{equipment!.Id}");
    }
}