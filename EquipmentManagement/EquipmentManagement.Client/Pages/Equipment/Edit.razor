@page "/equipment/edit/{id}"
@using EquipmentManagement.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Edit Equipment</h3>

@if (equipment == null)
{
    <div class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="@equipment" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="equipment-details">
            <div class="details-container">
                <div class="image-section">
                    @if (HasImage)
                    {
                        <div class="image-container">
                            <img src="@ImageUrl" alt="@equipment.Name" class="equipment-image" />
                            <button type="button" class="btn btn-danger btn-sm delete-image-btn" 
                                    @onclick="DeleteImage">
                                <span class="oi oi-trash"></span> Delete Image
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="no-image">No Image Available</div>
                    }
                    <InputFile OnChange="@HandleFileUpload" class="form-control mt-2" />
                </div>

                <div class="info-section">
                    <div class="detail-row">
                        <span class="detail-label">Name:</span>
                        <InputText @bind-Value="equipment.Name" class="form-control detail-value" />
                    </div>
                    
                    <div class="detail-row">
                        <span class="detail-label">Model:</span>
                        <InputText @bind-Value="equipment.Model" class="form-control detail-value" />
                    </div>
                    
                    <div class="detail-row">
                        <span class="detail-label">Description:</span>
                        <InputTextArea @bind-Value="equipment.Description" 
                                       placeholder="Enter description (optional)"
                                       class="form-control detail-value" />
                    </div>
                </div>
            </div>

            <div class="availability-section">
                <h4>Manage Availability</h4>
                
                <div class="period-input card mb-3 p-3">
                    <div class="row g-3">
                        <div class="col-md-5">
                            <label class="form-label">Start Date</label>
                            <InputDate @bind-Value="newPeriod.StartDate" 
                                     min="@DateTime.Today.ToString("yyyy-MM-dd")"
                                     class="form-control" />
                            <ValidationMessage For="@(() => newPeriod.StartDate)" />
                        </div>
            
                        <div class="col-md-5">
                            <label class="form-label">End Date</label>
                            <InputDate @bind-Value="newPeriod.EndDate" 
                                     min="@newPeriod.StartDate.ToString("yyyy-MM-dd")"
                                     class="form-control" />
                            <ValidationMessage For="@(() => newPeriod.EndDate)" />
                        </div>
                        
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="button" class="btn btn-primary w-100" 
                                    @onclick="AddPeriod" disabled="@(!CanAddPeriod)">
                                Add
                            </button>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(periodError))
                    {
                        <div class="text-danger mt-2">@periodError</div>
                    }
                </div>

                @if (localPeriods.Any())
                {
                    <div class="periods-list card">
                        <div class="card-header">
                            <h5 class="mb-0">Current Availability Periods</h5>
                        </div>
                        <div class="card-body">
                            <div class="list-group">
                                @foreach (var period in localPeriods.OrderBy(p => p.StartDate))
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@period.StartDate.ToString("dd-MM-yyyy")</strong> to 
                                            <strong>@period.EndDate.ToString("dd-MM-yyyy")</strong>
                                            <span class="text-muted ms-2">
                                                (@((period.EndDate - period.StartDate).TotalDays + 1) days)
                                            </span>
                                        </div>
                                        <button type="button" class="btn btn-sm btn-outline-danger"
                                                @onclick="() => RemovePeriod(period)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        No availability periods added. Equipment is currently unavailable.
                    </div>
                }
            </div>

            <div class="button-group">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private Equipment? equipment;
    private IBrowserFile? selectedFile;
    private string? ImageUrl => HasImage ? $"data:{equipment!.ImageContentType};base64,{Convert.ToBase64String(equipment.ImageData!)}" : null;
    private bool HasImage => equipment?.ImageData != null && equipment.ImageContentType != null;
    private bool deleteImageOnSave = false;

    // Availability management
    private List<AvailabilityPeriod> localPeriods = new();
    private string? periodError;
    private AvailabilityPeriod newPeriod = new() 
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today.AddDays(1)
    };

    private bool CanAddPeriod => 
        newPeriod.StartDate != default && 
        newPeriod.EndDate != default &&
        newPeriod.StartDate <= newPeriod.EndDate &&
        newPeriod.StartDate >= DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(Id, out int equipmentId))
        {
            equipment = await Http.GetFromJsonAsync<Equipment>($"api/equipment/{equipmentId}");
            localPeriods = await Http.GetFromJsonAsync<List<AvailabilityPeriod>>($"api/equipment/{equipmentId}/availability") ?? new();
        }
    }

    private void AddPeriod()
    {
        periodError = null;
        
        if (newPeriod.StartDate < DateTime.Today)
        {
            periodError = "Start date cannot be in the past";
            return;
        }
        
        if (newPeriod.EndDate < DateTime.Today)
        {
            periodError = "End date cannot be in the past";
            return;
        }

        if (newPeriod.StartDate > newPeriod.EndDate)
        {
            periodError = "End date must be after start date";
            return;
        }
        
        // Check for overlaps with existing periods
        if (localPeriods.Any(p => 
            (newPeriod.StartDate >= p.StartDate && newPeriod.StartDate <= p.EndDate) ||
            (newPeriod.EndDate >= p.StartDate && newPeriod.EndDate <= p.EndDate) ||
            (newPeriod.StartDate <= p.StartDate && newPeriod.EndDate >= p.EndDate)))
        {
            periodError = "This period overlaps with an existing availability period";
            return;
        }
        
        localPeriods.Add(new AvailabilityPeriod {
            StartDate = newPeriod.StartDate,
            EndDate = newPeriod.EndDate
        });
        
        // Reset with default dates
        var nextStartDate = localPeriods.Max(p => p.EndDate).AddDays(1);
        newPeriod = new AvailabilityPeriod 
        {
            StartDate = nextStartDate < DateTime.Today ? DateTime.Today : nextStartDate,
            EndDate = (nextStartDate < DateTime.Today ? DateTime.Today : nextStartDate).AddDays(1)
        };
    }

    private void RemovePeriod(AvailabilityPeriod period)
    {
        localPeriods.Remove(period);
        StateHasChanged();
    }


    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/equipment/{equipment!.Id}", equipment);
            
            if (response.IsSuccessStatusCode)
            {
                
                var currentPeriods = await Http.GetFromJsonAsync<List<AvailabilityPeriod>>($"api/equipment/{equipment.Id}/availability") ?? new();
                
                var periodsToDelete = currentPeriods.Where(p => !localPeriods.Any(lp => lp.Id == p.Id));
                foreach (var period in periodsToDelete)
                {
                    await Http.DeleteAsync($"api/availability/{period.Id}");
                }
                
                var periodsToAdd = localPeriods.Where(p => p.Id == 0);
                foreach (var period in periodsToAdd)
                {
                    await Http.PostAsJsonAsync(
                        $"api/equipment/{equipment.Id}/availability", 
                        new AvailabilityPeriod 
                        {
                            StartDate = period.StartDate,
                            EndDate = period.EndDate,
                            EquipmentId = equipment.Id
                        });
                }

                if (selectedFile != null)
                {
                    await UploadImage(equipment.Id, selectedFile);
                }

                if (deleteImageOnSave)
                {
                    await Http.DeleteAsync($"api/equipment/{equipment.Id}/image");
                }

                NavManager.NavigateTo($"/equipment/{equipment.Id}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating equipment: {ex.Message}");
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        equipment!.ImageData = buffer;
        equipment.ImageContentType = format;
    }

    private async Task UploadImage(int equipmentId, IBrowserFile file)
    {
        using var content = new MultipartFormDataContent();
        using var fileStream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        content.Add(new StreamContent(fileStream), "file", file.Name);
        
        await Http.PostAsync($"api/equipment/{equipmentId}/upload-image", content);
    }

    private async Task DeleteImage()
    {
        if (equipment == null) return;

        equipment.ImageData = null;
        equipment.ImageContentType = null;

        deleteImageOnSave = true;
    }

    private void Cancel()
    {
        NavManager.NavigateTo($"/equipments");
    }
}