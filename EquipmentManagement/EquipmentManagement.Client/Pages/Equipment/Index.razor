@page "/"
@page "/equipments"
@using System.Text.Json
@inject HttpClient Http;


<div class="equipment-list-container">
<div class="list-header">
    <h3>Equipment List</h3>
    <a href="/equipment/register" class="btn btn-success">
        <i class="bi bi-plus-circle"></i> Add New Equipment
    </a>
</div>

@if (isLoading)
{
    <div class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!equipments.Any())
{
    <div class="empty-state">
        <i class="bi bi-inboxes"></i>
        <p>No equipment found</p>
        <a href="/equipment/register" class="btn btn-primary">
            Add Your First Equipment
        </a>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-light">
                <tr>
                    <th>Name</th>
                    <th>Model</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in equipments)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Model</td>
                        <td>
                            @if (string.IsNullOrWhiteSpace(item.Description))
                            {
                                <span class="text-muted">No description</span>
                            }
                            else
                            {
                                @item.Description
                            }
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="/equipment/@item.Id" class="btn btn-sm btn-outline-info">
                                    <i class="bi bi-eye"></i> Details
                                </a>
                                <a href="/equipment/edit/@item.Id" class="btn btn-sm btn-outline-primary">
                                    <i class="bi bi-pencil"></i> Edit
                                </a>
                                <button @onclick="() => ConfirmDelete(item.Id)"
                                        class="btn btn-sm btn-outline-danger">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="pagination-container mt-3">
        <nav aria-label="Equipment pagination">
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">
                        Previous
                    </button>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">
                        Next
                    </button>
                </li>
            </ul>
        </nav>
    </div>
}
</div>

@if (showDeleteModal)
{
<div class="modal-backdrop show"></div>
<div class="modal show" tabindex="-1" style="display: block;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" @onclick="() => showDeleteModal = false"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this equipment?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="() => showDeleteModal = false">
                    Cancel
                </button>
                <button type="button" class="btn btn-danger" @onclick="DeleteEquipment">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>
}

@code {
    private List<EquipmentDto> equipments = new();
    private string? errorMessage;
    private bool isLoading = true;
    private bool showDeleteModal = false;
    private int equipmentToDelete;
    private int currentPage = 1;
    private const int pageSize = 10;
    private int totalItems;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadEquipment();
    }

    private async Task LoadEquipment()
    {
        isLoading = true;

        try
        {
            var response = await Http.GetAsync($"api/equipment?page={currentPage}&pageSize={pageSize}");
            Console.WriteLine($"Status Code: {response.StatusCode}");

            var content = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Response Content: {content}");

            if (response.IsSuccessStatusCode)
            {
                var result = JsonSerializer.Deserialize<PaginatedResult<EquipmentDto>>(
                    content,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                Console.WriteLine($"Deserialized Data Count: {result?.Data?.Count ?? 0}");

                equipments = result?.Data ?? new();
                totalItems = result?.TotalCount ?? 0;
                totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            }
            else
            {
                errorMessage = $"Error loading equipment list: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error loading equipment: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ConfirmDelete(int id)
    {
        equipmentToDelete = id;
        showDeleteModal = true;
    }

    private async Task DeleteEquipment()
    {
        showDeleteModal = false;
        isLoading = true;

        var response = await Http.DeleteAsync($"api/equipment/{equipmentToDelete}");
        if (response.IsSuccessStatusCode)
        {
            await LoadEquipment();
        }
        else
        {
            errorMessage = "Error deleting equipment";
        }

        isLoading = false;
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadEquipment();
    }
}